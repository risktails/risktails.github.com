{"version":3,"sources":["sections/NavBar.js","sections/Home.js","sections/About.js","sections/Contact.js","App.js","serviceWorker.js","index.js"],"names":["WNavBar","Navbar","bg","variant","style","Container","className","Brand","inline","href","Nav","to","Component","HomePage","Row","Col","lg","AboutPage","ContactPage","App","path","About","Contact","Home","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0RAkBeA,E,uKAZP,OAAO,kBAACC,EAAA,EAAD,CAAQC,GAAG,OAAOC,QAAQ,OAAOC,MAAO,CAAC,YAAa,WACzD,kBAACC,EAAA,EAAD,CAAWC,UAAU,2BACjB,kBAACL,EAAA,EAAOM,MAAR,CAAcC,QAAM,EAACC,KAAK,IAAIL,MAAO,CAAC,YAAa,WAAnD,aACA,kBAACM,EAAA,EAAD,CAAKF,QAAM,GAEP,kBAAC,IAAD,CAAMG,GAAG,SAASL,UAAU,YAA5B,SACA,kBAAC,IAAD,CAAMK,GAAG,WAAWL,UAAU,YAA9B,kB,GAREM,a,gBCWPC,MAZf,WACQ,OAAO,kBAACR,EAAA,EAAD,KACH,kBAACS,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKC,GAAG,KAAR,mBAGA,kBAACD,EAAA,EAAD,CAAKC,GAAG,KAAR,6BCCDC,MAPf,WACQ,OAAO,kBAACZ,EAAA,EAAD,gGCMAa,MAPf,WACQ,OAAO,kBAACb,EAAA,EAAD,0G,QCmCAc,MAvBf,WACE,OACI,kBAAC,IAAD,KACE,6BACE,kBAAC,EAAD,MAGA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,UACV,kBAACC,EAAD,OAEF,kBAAC,IAAD,CAAOD,KAAK,YACV,kBAACE,EAAD,OAEF,kBAAC,IAAD,CAAOF,KAAK,KACV,kBAACG,EAAD,WCnBMC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.99497fe9.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Container, Navbar, Nav } from 'react-bootstrap';\nimport {Link} from \"react-router-dom\";\n\nclass WNavBar extends Component {\n    render() {\n        return <Navbar bg=\"dark\" variant=\"dark\" style={{'font-size': '1.2rem'}} >\n            <Container className=\"justify-content-between\">\n                <Navbar.Brand inline href=\"/\" style={{'font-size': '1.6rem'}}>RiskTails</Navbar.Brand>\n                <Nav inline>\n                    {/*<Link to=\"/\" className=\"nav-link\">Home</Link>*/}\n                    <Link to=\"/about\" className=\"nav-link\">About</Link>\n                    <Link to=\"/contact\" className=\"nav-link\">Contact</Link>\n                </Nav>\n            </Container>\n        </Navbar>;\n    }\n}\nexport default WNavBar;\n","import React, { Component } from 'react';\nimport { Container, Row, Col} from 'react-bootstrap';\n\nfunction HomePage() {\n        return <Container>\n            <Row>\n                <Col lg=\"6\">\n                    text to go here\n                </Col>\n                <Col lg=\"6\">\n                    Chart will appear here\n                </Col>\n            </Row>\n        </Container>\n}\nexport default HomePage;\n","import React, { Component } from 'react';\nimport { Container} from 'react-bootstrap';\n\nfunction AboutPage() {\n        return <Container>\n            This is About Page!\n            More info here watch this space!\n            Some more info and bio to go here\n        </Container>\n}\nexport default AboutPage;\n","import React, { Component } from 'react';\nimport { Container} from 'react-bootstrap';\n\nfunction ContactPage() {\n        return <Container>\n            This is Contact Page!\n            More info here watch this space!\n            Contact form details will need to go here\n        </Container>\n}\nexport default ContactPage;\n","import React from 'react';\n\nimport WNavBar from './sections/NavBar'\nimport HomePage from './sections/Home'\nimport AboutPage from './sections/About'\nimport ContactPage from './sections/Contact'\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n    Link,\n} from \"react-router-dom\";\n\nimport {Container} from \"react-bootstrap\";\n\nfunction App() {\n  return (\n      <Router>\n        <div>\n          <WNavBar/>\n          {/* A <Switch> looks through its children <Route>s and\n            renders the first one that matches the current URL. */}\n          <Switch>\n            <Route path=\"/about\">\n              <AboutPage />\n            </Route>\n            <Route path=\"/contact\">\n              <ContactPage />\n            </Route>\n            <Route path=\"/\">\n              <HomePage />\n            </Route>\n          </Switch>\n        </div>\n      </Router>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}